import React, { useState, useEffect } from 'react';
import apiData from './url.json';

// –¢–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–æ–≤–∞—Ä–∞ –∏–∑ API
interface ApiProduct {
  id: number;
  name: string;
  price: number;
  quantity: number;
  barcode: string;
  image?: string;  // –í –≤–∞—à–µ–º API —ç—Ç–æ –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è image
}

// –¢–∏–ø –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞—à–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
interface Product extends Omit<ApiProduct, 'image'> {
  selectedPrice?: number;
  categoryId?: number;
  imageUrl?: string;
}

interface ProductsSelectProps {
  token: string;
  products: Product[];
  onSelect: (products: Product[]) => void;
  onComplete: () => void;
  warehouseId?: number;
}

const ProductsSelect: React.FC<ProductsSelectProps> = ({
  token,
  products: selectedProducts,
  onSelect,
  onComplete,
  warehouseId
}) => {
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [categories] = useState([
    { id: 1, name: "–¶–≤–µ—Ç—ã" },
    { id: 2, name: "–ü–æ–¥–∞—Ä–∫–∏" }
  ]);
  const [selectedCategory, setSelectedCategory] = useState<number | null>(null);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
  const handleQuantityChange = (productId: number, newQuantity: number) => {
    const updatedProducts = selectedProducts.map(product =>
      product.id === productId ? { ...product, quantity: Math.max(1, newQuantity) } : product
    );
    onSelect(updatedProducts);
  };

  const handleRemoveProduct = (productId: number) => {
    onSelect(selectedProducts.filter(product => product.id !== productId));
  };

  const handlePriceChange = (productId: number, newPrice: number) => {
    onSelect(selectedProducts.map(product =>
      product.id === productId ? { ...product, selectedPrice: Math.max(1, newPrice) } : product
    ));
  };

  const handleAddProduct = (product: Product) => {
    const existingIndex = selectedProducts.findIndex(p => p.id === product.id);
    
    if (existingIndex >= 0) {
      const updatedProducts = [...selectedProducts];
      updatedProducts[existingIndex].quantity += 1;
      onSelect(updatedProducts);
    } else {
      onSelect([...selectedProducts, { 
        ...product, 
        quantity: 1,
        selectedPrice: product.price
      }]);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
  useEffect(() => {
    const loadProducts = async () => {
      try {
        setLoading(true);
        setError(null);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        const productMap = new Map<number, Product>();
        
        apiData.result.forEach(order => {
          if (order.goods?.length) {
            order.goods.forEach((good: ApiProduct) => {
              if (!productMap.has(good.id)) {
                const categoryId = good.name.includes('–ë—É–∫–µ—Ç') ? 1 : 
                                 good.name.includes('–ö–æ—Ä–æ–±–∫–∞') ? 2 : undefined;
                
                productMap.set(good.id, {
                  ...good,
                  categoryId,
                  imageUrl: good.image,  // –ü–µ—Ä–µ–Ω–æ—Å–∏–º image –≤ imageUrl
                  barcode: good.barcode || ''
                });
              }
            });
          }
        });

        setProducts(Array.from(productMap.values()));
      } catch (err) {
        console.error('Failed to load products:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã');
      } finally {
        setLoading(false);
      }
    };

    loadProducts();
  }, [token, warehouseId]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  const filteredProducts = products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
                         product.barcode.includes(searchTerm);
    const matchesCategory = !selectedCategory || product.categoryId === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã
  const totalSum = selectedProducts.reduce(
    (sum, product) => sum + (product.selectedPrice || product.price) * product.quantity, 
    0
  );

  return (
    <div className="form-container">
      <h2>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã</h2>

      {error && <div className="error-message">{error}</div>}

      <div className="search-controls">
        <div className="input-group">
          <label>–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:</label>
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥"
          />
        </div>

        <div className="input-group">
          <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
          <select
            value={selectedCategory || ''}
            onChange={(e) => setSelectedCategory(
              e.target.value ? Number(e.target.value) : null
            )}
          >
            <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
            {categories.map(category => (
              <option key={category.id} value={category.id}>
                {category.name}
              </option>
            ))}
          </select>
        </div>
      </div>

      {loading ? (
        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</div>
      ) : (
        <>
          <div className="products-grid">
            <div className="available-products">
              <h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ({filteredProducts.length})</h3>
              {filteredProducts.length === 0 ? (
                <div className="no-results">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
              ) : (
                <div className="products-container">
                  {filteredProducts.map(product => (
                    <div key={product.id} className="product-card">
                      <div className="product-image">
                        {product.imageUrl ? (
                          <img src={product.imageUrl} alt={product.name} />
                        ) : (
                          <div className="image-placeholder">üõí</div>
                        )}
                      </div>
                      <div className="product-info">
                        <div className="product-name">{product.name}</div>
                        <div className="product-price">{product.price} ‚ÇΩ</div>
                        <div className="product-stock">
                          –û—Å—Ç–∞—Ç–æ–∫: {product.quantity} —à—Ç.
                        </div>
                      </div>
                      <button 
                        onClick={() => handleAddProduct(product)}
                        className="add-button"
                      >
                        +
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>

            <div className="selected-products">
              <h3>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ({selectedProducts.length})</h3>
              {selectedProducts.length === 0 ? (
                <div className="no-results">–¢–æ–≤–∞—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã</div>
              ) : (
                <div className="selected-list">
                  {selectedProducts.map(product => (
                    <div key={product.id} className="selected-item">
                      <div className="product-main">
                        <div className="product-name">{product.name}</div>
                        <div className="price-control">
                          <input
                            type="number"
                            value={product.selectedPrice || product.price}
                            onChange={(e) => 
                              handlePriceChange(product.id, Number(e.target.value))
                            }
                            min="1"
                            step="1"
                          />
                          <span>‚ÇΩ</span>
                        </div>
                      </div>
                      <div className="quantity-controls">
                        <button 
                          onClick={() => handleQuantityChange(product.id, product.quantity - 1)}
                        >
                          -
                        </button>
                        <span>{product.quantity}</span>
                        <button 
                          onClick={() => handleQuantityChange(product.id, product.quantity + 1)}
                        >
                          +
                        </button>
                        <button 
                          onClick={() => handleRemoveProduct(product.id)}
                        >
                          √ó
                        </button>
                      </div>
                      <div className="product-sum">
                        {((product.selectedPrice || product.price) * product.quantity).toFixed(2)} ‚ÇΩ
                      </div>
                    </div>
                  ))}
                  <div className="total-sum">
                    –ò—Ç–æ–≥–æ: {totalSum.toFixed(2)} ‚ÇΩ
                  </div>
                </div>
              )}
            </div>
          </div>

          <div className="form-actions">
            <button
              onClick={onComplete}
              className="submit-button"
              disabled={selectedProducts.length === 0}
            >
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            </button>
          </div>
        </>
      )}
    </div>
  );
};

export default ProductsSelect;